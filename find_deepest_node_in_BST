'''
Find deepest node of a BST:
Algorithm:
MaxNode=0
Maxdepth=0

function Find_deepest(root,depth):
  if root is leaf node:
    if depth >= maxdepth
        replace maxdepth
        replace maxnode to root.data
  
  if root have left:
    Find_deepest(root.left,depth+1)
  if root have right:
    Find_deepest(root.right,depth+1)
'''

    maxdepth=0
    deepestNode=0

    def get_deepest_node(self):
        self.find_deepest(self.root,0)
        print('Deepest Node is: ',self.deepestNode,' at depth: ',self.maxdepth)

    def find_deepest(self,root,depth):

        if root.left is None and root.right is None:
            if depth >= self.maxdepth:
                self.maxdepth=depth
                self.deepestNode=root.data
                #print(root.data,maxdepth,deepestNode,depth)
            return (self.maxdepth,self.deepestNode)
        if root.left:
            self.find_deepest(root.left,depth+1)
        if root.right:
            self.find_deepest(root.right,depth+1)




+++++++++++++++++++++
import Binary_Search_Tree
B1=Binary_Search_Tree.BST()
B1.insert_node(B1.root,25)
B1.insert_node(B1.root,20)
B1.insert_node(B1.root,35)
B1.insert_node(B1.root,32)
B1.get_deepest_node()

OUTPUT=>   Deepest Node is:  2  at depth:  32
